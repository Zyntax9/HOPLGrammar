//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HOPLGrammar.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HOPL.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class HOPLGrammarParser : Parser {
	public const int
		NAMESPACE_KW=1, IMPORT_KW=2, ALIAS_KW=3, REQUIRED_KW=4, CONSTANT_KW=5, 
		RETURN_KW=6, AWAIT_KW=7, TRIGGER_KW=8, HANDLER_KW=9, LIST_KW=10, TUPLE_KW=11, 
		IF_KW=12, ELSE_KW=13, FOR_KW=14, FOREACH_KW=15, IN_KW=16, WHILE_KW=17, 
		NOT_KW=18, AND_KW=19, OR_KW=20, BOX_OPEN=21, BOX_CLOSE=22, CURLY_OPEN=23, 
		CURLY_CLOSE=24, PARAN_OPEN=25, PARAN_CLOSE=26, INTEGER=27, FLOAT=28, BOOLEAN=29, 
		STRING=30, INTEGER_VAL=31, FLOAT_VAL=32, BOOLEAN_VAL=33, STRING_VAL=34, 
		DOT=35, COMMA=36, ASSIGN=37, MULT=38, DIV=39, PLUS=40, MINUS=41, EQ=42, 
		NEQ=43, LESS=44, LEQ=45, GRT=46, GEQ=47, CONCAT=48, UIGNORE=49, SL_COMMENT=50, 
		ML_COMMENT=51, ID=52, WS=53, TERM=54, ERR=55;
	public const int
		RULE_compileUnit = 0, RULE_namespaceDec = 1, RULE_namespaceBody = 2, RULE_namespacePart = 3, 
		RULE_namespace = 4, RULE_importNamespace = 5, RULE_identifier = 6, RULE_args = 7, 
		RULE_body = 8, RULE_functionDec = 9, RULE_handlerDec = 10, RULE_call = 11, 
		RULE_stat = 12, RULE_expr = 13, RULE_await = 14, RULE_if = 15, RULE_elseIf = 16, 
		RULE_else = 17, RULE_while = 18, RULE_for = 19, RULE_foreach = 20, RULE_arg = 21, 
		RULE_varDec = 22, RULE_globalDec = 23, RULE_assign = 24, RULE_unpack = 25, 
		RULE_unpacked = 26, RULE_return = 27, RULE_typeName = 28, RULE_typeVal = 29;
	public static readonly string[] ruleNames = {
		"compileUnit", "namespaceDec", "namespaceBody", "namespacePart", "namespace", 
		"importNamespace", "identifier", "args", "body", "functionDec", "handlerDec", 
		"call", "stat", "expr", "await", "if", "elseIf", "else", "while", "for", 
		"foreach", "arg", "varDec", "globalDec", "assign", "unpack", "unpacked", 
		"return", "typeName", "typeVal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'namespace'", "'import'", "'as'", "'required'", "'const'", "'return'", 
		"'await'", "'trigger'", "'handle'", "'list'", "'tuple'", "'if'", "'else'", 
		"'for'", "'foreach'", "'in'", "'while'", "'not'", "'and'", "'or'", "'['", 
		"']'", "'{'", "'}'", "'('", "')'", "'int'", "'float'", "'bool'", "'string'", 
		null, null, null, null, "'.'", "','", "'='", "'*'", "'/'", "'+'", "'-'", 
		"'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'::'", "'_'", null, null, 
		null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAMESPACE_KW", "IMPORT_KW", "ALIAS_KW", "REQUIRED_KW", "CONSTANT_KW", 
		"RETURN_KW", "AWAIT_KW", "TRIGGER_KW", "HANDLER_KW", "LIST_KW", "TUPLE_KW", 
		"IF_KW", "ELSE_KW", "FOR_KW", "FOREACH_KW", "IN_KW", "WHILE_KW", "NOT_KW", 
		"AND_KW", "OR_KW", "BOX_OPEN", "BOX_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", 
		"PARAN_OPEN", "PARAN_CLOSE", "INTEGER", "FLOAT", "BOOLEAN", "STRING", 
		"INTEGER_VAL", "FLOAT_VAL", "BOOLEAN_VAL", "STRING_VAL", "DOT", "COMMA", 
		"ASSIGN", "MULT", "DIV", "PLUS", "MINUS", "EQ", "NEQ", "LESS", "LEQ", 
		"GRT", "GEQ", "CONCAT", "UIGNORE", "SL_COMMENT", "ML_COMMENT", "ID", "WS", 
		"TERM", "ERR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HOPLGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HOPLGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(HOPLGrammarParser.Eof, 0); }
		public ImportNamespaceContext[] importNamespace() {
			return GetRuleContexts<ImportNamespaceContext>();
		}
		public ImportNamespaceContext importNamespace(int i) {
			return GetRuleContext<ImportNamespaceContext>(i);
		}
		public ITerminalNode[] TERM() { return GetTokens(HOPLGrammarParser.TERM); }
		public ITerminalNode TERM(int i) {
			return GetToken(HOPLGrammarParser.TERM, i);
		}
		public NamespaceDecContext[] namespaceDec() {
			return GetRuleContexts<NamespaceDecContext>();
		}
		public NamespaceDecContext namespaceDec(int i) {
			return GetRuleContext<NamespaceDecContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IMPORT_KW) {
				{
				{
				State = 60; importNamespace();
				State = 61; Match(TERM);
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 69;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 68; namespaceDec();
				}
				}
				State = 71;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==NAMESPACE_KW );
			State = 73; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDecContext : ParserRuleContext {
		public ITerminalNode NAMESPACE_KW() { return GetToken(HOPLGrammarParser.NAMESPACE_KW, 0); }
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ITerminalNode CURLY_OPEN() { return GetToken(HOPLGrammarParser.CURLY_OPEN, 0); }
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(HOPLGrammarParser.CURLY_CLOSE, 0); }
		public NamespaceDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterNamespaceDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitNamespaceDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDecContext namespaceDec() {
		NamespaceDecContext _localctx = new NamespaceDecContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_namespaceDec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(NAMESPACE_KW);
			State = 76; @namespace();
			State = 77; Match(CURLY_OPEN);
			State = 78; namespaceBody();
			State = 79; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public NamespacePartContext[] namespacePart() {
			return GetRuleContexts<NamespacePartContext>();
		}
		public NamespacePartContext namespacePart(int i) {
			return GetRuleContext<NamespacePartContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REQUIRED_KW) | (1L << CONSTANT_KW) | (1L << TRIGGER_KW) | (1L << HANDLER_KW) | (1L << LIST_KW) | (1L << TUPLE_KW) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING))) != 0)) {
				{
				{
				State = 81; namespacePart();
				}
				}
				State = 86;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacePartContext : ParserRuleContext {
		public NamespacePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacePart; } }
	 
		public NamespacePartContext() { }
		public virtual void CopyFrom(NamespacePartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HandlerDecNamespaceContext : NamespacePartContext {
		public HandlerDecContext handlerDec() {
			return GetRuleContext<HandlerDecContext>(0);
		}
		public HandlerDecNamespaceContext(NamespacePartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterHandlerDecNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitHandlerDecNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerDecNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalDecNamespaceContext : NamespacePartContext {
		public GlobalDecContext globalDec() {
			return GetRuleContext<GlobalDecContext>(0);
		}
		public ITerminalNode TERM() { return GetToken(HOPLGrammarParser.TERM, 0); }
		public GlobalDecNamespaceContext(NamespacePartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterGlobalDecNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitGlobalDecNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDecNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDecNamespaceContext : NamespacePartContext {
		public FunctionDecContext functionDec() {
			return GetRuleContext<FunctionDecContext>(0);
		}
		public FunctionDecNamespaceContext(NamespacePartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDecNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDecNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacePartContext namespacePart() {
		NamespacePartContext _localctx = new NamespacePartContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_namespacePart);
		try {
			State = 92;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new FunctionDecNamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; functionDec();
				}
				break;

			case 2:
				_localctx = new GlobalDecNamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; globalDec();
				State = 89; Match(TERM);
				}
				break;

			case 3:
				_localctx = new HandlerDecNamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; handlerDec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(HOPLGrammarParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(HOPLGrammarParser.ID, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(HOPLGrammarParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(HOPLGrammarParser.DOT, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(ID);
			State = 99;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 95; Match(DOT);
					State = 96; Match(ID);
					}
					} 
				}
				State = 101;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		public ITerminalNode IMPORT_KW() { return GetToken(HOPLGrammarParser.IMPORT_KW, 0); }
		public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		public ITerminalNode ALIAS_KW() { return GetToken(HOPLGrammarParser.ALIAS_KW, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterImportNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitImportNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(IMPORT_KW);
			State = 103; @namespace();
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALIAS_KW) {
				{
				State = 104; Match(ALIAS_KW);
				State = 105; @namespace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(HOPLGrammarParser.ID, 0); }
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(HOPLGrammarParser.DOT, 0); }
		public ITerminalNode[] BOX_OPEN() { return GetTokens(HOPLGrammarParser.BOX_OPEN); }
		public ITerminalNode BOX_OPEN(int i) {
			return GetToken(HOPLGrammarParser.BOX_OPEN, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] BOX_CLOSE() { return GetTokens(HOPLGrammarParser.BOX_CLOSE); }
		public ITerminalNode BOX_CLOSE(int i) {
			return GetToken(HOPLGrammarParser.BOX_CLOSE, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 108; @namespace();
				State = 109; Match(DOT);
				}
				break;
			}
			State = 113; Match(ID);
			State = 120;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 114; Match(BOX_OPEN);
					State = 115; expr(0);
					State = 116; Match(BOX_CLOSE);
					}
					} 
				}
				State = 122;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(PARAN_OPEN);
			State = 132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRIGGER_KW) | (1L << LIST_KW) | (1L << TUPLE_KW) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING))) != 0)) {
				{
				State = 124; arg();
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 125; Match(COMMA);
					State = 126; arg();
					}
					}
					State = 131;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 134; Match(PARAN_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode CURLY_OPEN() { return GetToken(HOPLGrammarParser.CURLY_OPEN, 0); }
		public ITerminalNode CURLY_CLOSE() { return GetToken(HOPLGrammarParser.CURLY_CLOSE, 0); }
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(CURLY_OPEN);
			State = 140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETURN_KW) | (1L << AWAIT_KW) | (1L << TRIGGER_KW) | (1L << LIST_KW) | (1L << TUPLE_KW) | (1L << IF_KW) | (1L << FOR_KW) | (1L << FOREACH_KW) | (1L << WHILE_KW) | (1L << NOT_KW) | (1L << BOX_OPEN) | (1L << CURLY_OPEN) | (1L << PARAN_OPEN) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << INTEGER_VAL) | (1L << FLOAT_VAL) | (1L << BOOLEAN_VAL) | (1L << STRING_VAL) | (1L << MINUS) | (1L << ID))) != 0)) {
				{
				{
				State = 137; stat();
				}
				}
				State = 142;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 143; Match(CURLY_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDecContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HOPLGrammarParser.ID, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public FunctionDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDecContext functionDec() {
		FunctionDecContext _localctx = new FunctionDecContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_functionDec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; typeName(0);
			State = 146; Match(ID);
			State = 147; args();
			State = 148; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerDecContext : ParserRuleContext {
		public ITerminalNode HANDLER_KW() { return GetToken(HOPLGrammarParser.HANDLER_KW, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(HOPLGrammarParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(HOPLGrammarParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public HandlerDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerDec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterHandlerDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitHandlerDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerDecContext handlerDec() {
		HandlerDecContext _localctx = new HandlerDecContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_handlerDec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(HANDLER_KW);
			State = 151; expr(0);
			State = 152; Match(PARAN_OPEN);
			State = 164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRIGGER_KW) | (1L << LIST_KW) | (1L << TUPLE_KW) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING))) != 0)) {
				{
				State = 153; typeName(0);
				State = 154; Match(ID);
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 155; Match(COMMA);
					State = 156; typeName(0);
					State = 157; Match(ID);
					}
					}
					State = 163;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 166; Match(PARAN_CLOSE);
			State = 167; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; identifier();
			State = 170; Match(PARAN_OPEN);
			State = 179;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AWAIT_KW) | (1L << NOT_KW) | (1L << BOX_OPEN) | (1L << CURLY_OPEN) | (1L << PARAN_OPEN) | (1L << INTEGER_VAL) | (1L << FLOAT_VAL) | (1L << BOOLEAN_VAL) | (1L << STRING_VAL) | (1L << MINUS) | (1L << ID))) != 0)) {
				{
				State = 171; expr(0);
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 172; Match(COMMA);
					State = 173; expr(0);
					}
					}
					State = 178;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 181; Match(PARAN_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatContext : StatContext {
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public ElseIfContext[] elseIf() {
			return GetRuleContexts<ElseIfContext>();
		}
		public ElseIfContext elseIf(int i) {
			return GetRuleContext<ElseIfContext>(i);
		}
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecStatContext : StatContext {
		public VarDecContext varDec() {
			return GetRuleContext<VarDecContext>(0);
		}
		public ITerminalNode TERM() { return GetToken(HOPLGrammarParser.TERM, 0); }
		public DecStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterDecStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitDecStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnpackStatContext : StatContext {
		public UnpackContext unpack() {
			return GetRuleContext<UnpackContext>(0);
		}
		public ITerminalNode TERM() { return GetToken(HOPLGrammarParser.TERM, 0); }
		public UnpackStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterUnpackStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitUnpackStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpackStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprStatContext : StatContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode TERM() { return GetToken(HOPLGrammarParser.TERM, 0); }
		public ExprStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterExprStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitExprStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatContext : StatContext {
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public ITerminalNode TERM() { return GetToken(HOPLGrammarParser.TERM, 0); }
		public ReturnStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterReturnStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitReturnStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeachStatContext : StatContext {
		public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		public ForeachStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterForeachStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitForeachStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatContext : StatContext {
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ITerminalNode TERM() { return GetToken(HOPLGrammarParser.TERM, 0); }
		public AssignStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterAssignStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitAssignStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatContext : StatContext {
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public ForStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterForStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitForStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatContext : StatContext {
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public WhileStatContext(StatContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterWhileStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitWhileStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat);
		int _la;
		try {
			int _alt;
			State = 211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				_localctx = new AssignStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; assign();
				State = 184; Match(TERM);
				}
				break;

			case 2:
				_localctx = new DecStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; varDec();
				State = 187; Match(TERM);
				}
				break;

			case 3:
				_localctx = new ReturnStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; @return();
				State = 190; Match(TERM);
				}
				break;

			case 4:
				_localctx = new ExprStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; expr(0);
				State = 193; Match(TERM);
				}
				break;

			case 5:
				_localctx = new UnpackStatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 195; unpack();
				State = 196; Match(TERM);
				}
				break;

			case 6:
				_localctx = new IfStatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 198; @if();
				State = 202;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 199; elseIf();
						}
						} 
					}
					State = 204;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
				}
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE_KW) {
					{
					State = 205; @else();
					}
				}

				}
				break;

			case 7:
				_localctx = new WhileStatContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 208; @while();
				}
				break;

			case 8:
				_localctx = new ForStatContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 209; @for();
				}
				break;

			case 9:
				_localctx = new ForeachStatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 210; @foreach();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR_KW() { return GetToken(HOPLGrammarParser.OR_KW, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AwaitExprContext : ExprContext {
		public AwaitContext await() {
			return GetRuleContext<AwaitContext>(0);
		}
		public AwaitExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterAwaitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitAwaitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwaitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(HOPLGrammarParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(HOPLGrammarParser.DIV, 0); }
		public MultExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterMultExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitMultExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValExprContext : ExprContext {
		public TypeValContext typeVal() {
			return GetRuleContext<TypeValContext>(0);
		}
		public ValExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterValExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitValExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CONCAT() { return GetToken(HOPLGrammarParser.CONCAT, 0); }
		public ConcatExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterConcatExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitConcatExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode BOX_OPEN() { return GetToken(HOPLGrammarParser.BOX_OPEN, 0); }
		public ITerminalNode BOX_CLOSE() { return GetToken(HOPLGrammarParser.BOX_CLOSE, 0); }
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExprContext : ExprContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VarExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterVarExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitVarExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		public ITerminalNode NOT_KW() { return GetToken(HOPLGrammarParser.NOT_KW, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddiExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(HOPLGrammarParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(HOPLGrammarParser.MINUS, 0); }
		public AddiExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterAddiExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitAddiExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddiExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegExprContext : ExprContext {
		public ITerminalNode MINUS() { return GetToken(HOPLGrammarParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterNegExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitNegExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(HOPLGrammarParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(HOPLGrammarParser.NEQ, 0); }
		public ITerminalNode LEQ() { return GetToken(HOPLGrammarParser.LEQ, 0); }
		public ITerminalNode GEQ() { return GetToken(HOPLGrammarParser.GEQ, 0); }
		public ITerminalNode LESS() { return GetToken(HOPLGrammarParser.LESS, 0); }
		public ITerminalNode GRT() { return GetToken(HOPLGrammarParser.GRT, 0); }
		public CompExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterCompExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitCompExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExprContext : ExprContext {
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public CallExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExprContext : ExprContext {
		public ITerminalNode CURLY_OPEN() { return GetToken(HOPLGrammarParser.CURLY_OPEN, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(HOPLGrammarParser.CURLY_CLOSE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public TupleExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParanExprContext : ExprContext {
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public ParanExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterParanExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitParanExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParanExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExprContext : ExprContext {
		public ITerminalNode BOX_OPEN() { return GetToken(HOPLGrammarParser.BOX_OPEN, 0); }
		public ITerminalNode BOX_CLOSE() { return GetToken(HOPLGrammarParser.BOX_CLOSE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public ListExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterListExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitListExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND_KW() { return GetToken(HOPLGrammarParser.AND_KW, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				_localctx = new ParanExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 214; Match(PARAN_OPEN);
				State = 215; expr(0);
				State = 216; Match(PARAN_CLOSE);
				}
				break;

			case 2:
				{
				_localctx = new CallExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 218; call();
				}
				break;

			case 3:
				{
				_localctx = new AwaitExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 219; await();
				}
				break;

			case 4:
				{
				_localctx = new NegExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 220; Match(MINUS);
				State = 221; expr(12);
				}
				break;

			case 5:
				{
				_localctx = new NotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 222; Match(NOT_KW);
				State = 223; expr(11);
				}
				break;

			case 6:
				{
				_localctx = new ValExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 224; typeVal();
				}
				break;

			case 7:
				{
				_localctx = new VarExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 225; identifier();
				}
				break;

			case 8:
				{
				_localctx = new ListExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 226; Match(BOX_OPEN);
				State = 235;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AWAIT_KW) | (1L << NOT_KW) | (1L << BOX_OPEN) | (1L << CURLY_OPEN) | (1L << PARAN_OPEN) | (1L << INTEGER_VAL) | (1L << FLOAT_VAL) | (1L << BOOLEAN_VAL) | (1L << STRING_VAL) | (1L << MINUS) | (1L << ID))) != 0)) {
					{
					State = 227; expr(0);
					State = 232;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 228; Match(COMMA);
						State = 229; expr(0);
						}
						}
						State = 234;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 237; Match(BOX_CLOSE);
				}
				break;

			case 9:
				{
				_localctx = new TupleExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 238; Match(CURLY_OPEN);
				State = 239; expr(0);
				State = 244;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 240; Match(COMMA);
					State = 241; expr(0);
					}
					}
					State = 246;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 247; Match(CURLY_CLOSE);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 276;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 274;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
					case 1:
						{
						_localctx = new MultExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 251;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 252;
						((MultExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((MultExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 253; expr(11);
						}
						break;

					case 2:
						{
						_localctx = new AddiExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 254;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 255;
						((AddiExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddiExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 256; expr(10);
						}
						break;

					case 3:
						{
						_localctx = new CompExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 257;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 258;
						((CompExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NEQ) | (1L << LESS) | (1L << LEQ) | (1L << GRT) | (1L << GEQ))) != 0)) ) {
							((CompExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 259; expr(9);
						}
						break;

					case 4:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 260;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 261; Match(AND_KW);
						State = 262; expr(8);
						}
						break;

					case 5:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 263;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 264; Match(OR_KW);
						State = 265; expr(7);
						}
						break;

					case 6:
						{
						_localctx = new ConcatExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 266;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 267; Match(CONCAT);
						State = 268; expr(6);
						}
						break;

					case 7:
						{
						_localctx = new IndexExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 269;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 270; Match(BOX_OPEN);
						State = 271; expr(0);
						State = 272; Match(BOX_CLOSE);
						}
						break;
					}
					} 
				}
				State = 278;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AwaitContext : ParserRuleContext {
		public ITerminalNode AWAIT_KW() { return GetToken(HOPLGrammarParser.AWAIT_KW, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AwaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_await; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterAwait(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitAwait(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwait(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AwaitContext await() {
		AwaitContext _localctx = new AwaitContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_await);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(AWAIT_KW);
			State = 280; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ITerminalNode IF_KW() { return GetToken(HOPLGrammarParser.IF_KW, 0); }
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(IF_KW);
			State = 283; Match(PARAN_OPEN);
			State = 284; expr(0);
			State = 285; Match(PARAN_CLOSE);
			State = 286; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfContext : ParserRuleContext {
		public ITerminalNode ELSE_KW() { return GetToken(HOPLGrammarParser.ELSE_KW, 0); }
		public ITerminalNode IF_KW() { return GetToken(HOPLGrammarParser.IF_KW, 0); }
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterElseIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitElseIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfContext elseIf() {
		ElseIfContext _localctx = new ElseIfContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_elseIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(ELSE_KW);
			State = 289; Match(IF_KW);
			State = 290; Match(PARAN_OPEN);
			State = 291; expr(0);
			State = 292; Match(PARAN_CLOSE);
			State = 293; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ITerminalNode ELSE_KW() { return GetToken(HOPLGrammarParser.ELSE_KW, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(ELSE_KW);
			State = 296; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public ITerminalNode WHILE_KW() { return GetToken(HOPLGrammarParser.WHILE_KW, 0); }
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(WHILE_KW);
			State = 299; Match(PARAN_OPEN);
			State = 300; expr(0);
			State = 301; Match(PARAN_CLOSE);
			State = 302; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public VarDecContext declare;
		public ExprContext predicate;
		public AssignContext reeval;
		public ITerminalNode FOR_KW() { return GetToken(HOPLGrammarParser.FOR_KW, 0); }
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public ITerminalNode[] TERM() { return GetTokens(HOPLGrammarParser.TERM); }
		public ITerminalNode TERM(int i) {
			return GetToken(HOPLGrammarParser.TERM, i);
		}
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDecContext varDec() {
			return GetRuleContext<VarDecContext>(0);
		}
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(FOR_KW);
			State = 305; Match(PARAN_OPEN);
			State = 307;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRIGGER_KW) | (1L << LIST_KW) | (1L << TUPLE_KW) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING))) != 0)) {
				{
				State = 306; _localctx.declare = varDec();
				}
			}

			State = 309; Match(TERM);
			State = 310; _localctx.predicate = expr(0);
			State = 311; Match(TERM);
			State = 313;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 312; _localctx.reeval = assign();
				}
			}

			State = 315; Match(PARAN_CLOSE);
			State = 316; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		public ITerminalNode FOREACH_KW() { return GetToken(HOPLGrammarParser.FOREACH_KW, 0); }
		public ITerminalNode PARAN_OPEN() { return GetToken(HOPLGrammarParser.PARAN_OPEN, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HOPLGrammarParser.ID, 0); }
		public ITerminalNode IN_KW() { return GetToken(HOPLGrammarParser.IN_KW, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PARAN_CLOSE() { return GetToken(HOPLGrammarParser.PARAN_CLOSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterForeach(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitForeach(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_foreach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(FOREACH_KW);
			State = 319; Match(PARAN_OPEN);
			State = 320; typeName(0);
			State = 321; Match(ID);
			State = 322; Match(IN_KW);
			State = 323; expr(0);
			State = 324; Match(PARAN_CLOSE);
			State = 325; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HOPLGrammarParser.ID, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; typeName(0);
			State = 328; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDecContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HOPLGrammarParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HOPLGrammarParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterVarDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitVarDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDecContext varDec() {
		VarDecContext _localctx = new VarDecContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_varDec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; typeName(0);
			State = 331; Match(ID);
			State = 334;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 332; Match(ASSIGN);
				State = 333; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalDecContext : ParserRuleContext {
		public VarDecContext varDec() {
			return GetRuleContext<VarDecContext>(0);
		}
		public ITerminalNode REQUIRED_KW() { return GetToken(HOPLGrammarParser.REQUIRED_KW, 0); }
		public ITerminalNode CONSTANT_KW() { return GetToken(HOPLGrammarParser.CONSTANT_KW, 0); }
		public GlobalDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalDec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterGlobalDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitGlobalDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalDecContext globalDec() {
		GlobalDecContext _localctx = new GlobalDecContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_globalDec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==REQUIRED_KW) {
				{
				State = 336; Match(REQUIRED_KW);
				}
			}

			State = 340;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONSTANT_KW) {
				{
				State = 339; Match(CONSTANT_KW);
				}
			}

			State = 342; varDec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(HOPLGrammarParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; identifier();
			State = 345; Match(ASSIGN);
			State = 346; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpackContext : ParserRuleContext {
		public ITerminalNode CURLY_OPEN() { return GetToken(HOPLGrammarParser.CURLY_OPEN, 0); }
		public UnpackedContext[] unpacked() {
			return GetRuleContexts<UnpackedContext>();
		}
		public UnpackedContext unpacked(int i) {
			return GetRuleContext<UnpackedContext>(i);
		}
		public ITerminalNode CURLY_CLOSE() { return GetToken(HOPLGrammarParser.CURLY_CLOSE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HOPLGrammarParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public UnpackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpack; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterUnpack(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitUnpack(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpack(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpackContext unpack() {
		UnpackContext _localctx = new UnpackContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_unpack);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(CURLY_OPEN);
			State = 349; unpacked();
			State = 354;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 350; Match(COMMA);
				State = 351; unpacked();
				}
				}
				State = 356;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 357; Match(CURLY_CLOSE);
			State = 358; Match(ASSIGN);
			State = 359; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpackedContext : ParserRuleContext {
		public UnpackedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpacked; } }
	 
		public UnpackedContext() { }
		public virtual void CopyFrom(UnpackedContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IgnoreUnpackedContext : UnpackedContext {
		public ITerminalNode UIGNORE() { return GetToken(HOPLGrammarParser.UIGNORE, 0); }
		public IgnoreUnpackedContext(UnpackedContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIgnoreUnpacked(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIgnoreUnpacked(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreUnpacked(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdUnpackedContext : UnpackedContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdUnpackedContext(UnpackedContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIdUnpacked(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIdUnpacked(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdUnpacked(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecUnpackedContext : UnpackedContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(HOPLGrammarParser.ID, 0); }
		public DecUnpackedContext(UnpackedContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterDecUnpacked(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitDecUnpacked(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecUnpacked(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpackedContext unpacked() {
		UnpackedContext _localctx = new UnpackedContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_unpacked);
		try {
			State = 366;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ID:
				_localctx = new IdUnpackedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; identifier();
				}
				break;
			case TRIGGER_KW:
			case LIST_KW:
			case TUPLE_KW:
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
				_localctx = new DecUnpackedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; typeName(0);
				State = 363; Match(ID);
				}
				break;
			case UIGNORE:
				_localctx = new IgnoreUnpackedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 365; Match(UIGNORE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public ITerminalNode RETURN_KW() { return GetToken(HOPLGrammarParser.RETURN_KW, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; Match(RETURN_KW);
			State = 370;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AWAIT_KW) | (1L << NOT_KW) | (1L << BOX_OPEN) | (1L << CURLY_OPEN) | (1L << PARAN_OPEN) | (1L << INTEGER_VAL) | (1L << FLOAT_VAL) | (1L << BOOLEAN_VAL) | (1L << STRING_VAL) | (1L << MINUS) | (1L << ID))) != 0)) {
				{
				State = 369; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
	 
		public TypeNameContext() { }
		public virtual void CopyFrom(TypeNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatTypeContext : TypeNameContext {
		public ITerminalNode FLOAT() { return GetToken(HOPLGrammarParser.FLOAT, 0); }
		public FloatTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterFloatType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitFloatType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntTypeContext : TypeNameContext {
		public ITerminalNode INTEGER() { return GetToken(HOPLGrammarParser.INTEGER, 0); }
		public IntTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIntType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIntType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTypeContext : TypeNameContext {
		public ITerminalNode STRING() { return GetToken(HOPLGrammarParser.STRING, 0); }
		public StringTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterStringType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitStringType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleTypeContext : TypeNameContext {
		public ITerminalNode TUPLE_KW() { return GetToken(HOPLGrammarParser.TUPLE_KW, 0); }
		public ITerminalNode LESS() { return GetToken(HOPLGrammarParser.LESS, 0); }
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ITerminalNode GRT() { return GetToken(HOPLGrammarParser.GRT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public TupleTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TriggerTypeContext : TypeNameContext {
		public ITerminalNode TRIGGER_KW() { return GetToken(HOPLGrammarParser.TRIGGER_KW, 0); }
		public ITerminalNode LESS() { return GetToken(HOPLGrammarParser.LESS, 0); }
		public ITerminalNode GRT() { return GetToken(HOPLGrammarParser.GRT, 0); }
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public TriggerTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterTriggerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitTriggerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTriggerType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : TypeNameContext {
		public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public ITerminalNode LESS() { return GetToken(HOPLGrammarParser.LESS, 0); }
		public ITerminalNode GRT() { return GetToken(HOPLGrammarParser.GRT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(HOPLGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HOPLGrammarParser.COMMA, i);
		}
		public FunctionTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListTypeContext : TypeNameContext {
		public ITerminalNode LIST_KW() { return GetToken(HOPLGrammarParser.LIST_KW, 0); }
		public ITerminalNode LESS() { return GetToken(HOPLGrammarParser.LESS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode GRT() { return GetToken(HOPLGrammarParser.GRT, 0); }
		public ListTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolTypeContext : TypeNameContext {
		public ITerminalNode BOOLEAN() { return GetToken(HOPLGrammarParser.BOOLEAN, 0); }
		public BoolTypeContext(TypeNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(_ctx, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
				{
				_localctx = new IntTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 373; Match(INTEGER);
				}
				break;
			case FLOAT:
				{
				_localctx = new FloatTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 374; Match(FLOAT);
				}
				break;
			case BOOLEAN:
				{
				_localctx = new BoolTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 375; Match(BOOLEAN);
				}
				break;
			case STRING:
				{
				_localctx = new StringTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 376; Match(STRING);
				}
				break;
			case LIST_KW:
				{
				_localctx = new ListTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 377; Match(LIST_KW);
				State = 378; Match(LESS);
				State = 379; typeName(0);
				State = 380; Match(GRT);
				}
				break;
			case TUPLE_KW:
				{
				_localctx = new TupleTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 382; Match(TUPLE_KW);
				State = 383; Match(LESS);
				State = 384; typeName(0);
				State = 389;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 385; Match(COMMA);
					State = 386; typeName(0);
					}
					}
					State = 391;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 392; Match(GRT);
				}
				break;
			case TRIGGER_KW:
				{
				_localctx = new TriggerTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 394; Match(TRIGGER_KW);
				State = 395; Match(LESS);
				State = 404;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRIGGER_KW) | (1L << LIST_KW) | (1L << TUPLE_KW) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING))) != 0)) {
					{
					State = 396; typeName(0);
					State = 401;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 397; Match(COMMA);
						State = 398; typeName(0);
						}
						}
						State = 403;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 406; Match(GRT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 424;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FunctionTypeContext(new TypeNameContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 409;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 410; Match(LESS);
					State = 419;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRIGGER_KW) | (1L << LIST_KW) | (1L << TUPLE_KW) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING))) != 0)) {
						{
						State = 411; typeName(0);
						State = 416;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 412; Match(COMMA);
							State = 413; typeName(0);
							}
							}
							State = 418;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
					}

					State = 421; Match(GRT);
					}
					} 
				}
				State = 426;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeValContext : ParserRuleContext {
		public TypeValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeVal; } }
	 
		public TypeValContext() { }
		public virtual void CopyFrom(TypeValContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntValContext : TypeValContext {
		public ITerminalNode INTEGER_VAL() { return GetToken(HOPLGrammarParser.INTEGER_VAL, 0); }
		public IntValContext(TypeValContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterIntVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitIntVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValContext : TypeValContext {
		public ITerminalNode STRING_VAL() { return GetToken(HOPLGrammarParser.STRING_VAL, 0); }
		public StringValContext(TypeValContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterStringVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitStringVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValContext : TypeValContext {
		public ITerminalNode FLOAT_VAL() { return GetToken(HOPLGrammarParser.FLOAT_VAL, 0); }
		public FloatValContext(TypeValContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterFloatVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitFloatVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolValContext : TypeValContext {
		public ITerminalNode BOOLEAN_VAL() { return GetToken(HOPLGrammarParser.BOOLEAN_VAL, 0); }
		public BoolValContext(TypeValContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.EnterBoolVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHOPLGrammarListener typedListener = listener as IHOPLGrammarListener;
			if (typedListener != null) typedListener.ExitBoolVal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHOPLGrammarVisitor<TResult> typedVisitor = visitor as IHOPLGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeValContext typeVal() {
		TypeValContext _localctx = new TypeValContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_typeVal);
		try {
			State = 431;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER_VAL:
				_localctx = new IntValContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; Match(INTEGER_VAL);
				}
				break;
			case FLOAT_VAL:
				_localctx = new FloatValContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 428; Match(FLOAT_VAL);
				}
				break;
			case BOOLEAN_VAL:
				_localctx = new BoolValContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 429; Match(BOOLEAN_VAL);
				}
				break;
			case STRING_VAL:
				_localctx = new StringValContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 430; Match(STRING_VAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);

		case 28: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 10);

		case 1: return Precpred(_ctx, 9);

		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 15);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x39\x1B4\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x3\x2"+
		"\x3\x2\a\x2\x42\n\x2\f\x2\xE\x2\x45\v\x2\x3\x2\x6\x2H\n\x2\r\x2\xE\x2"+
		"I\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\a\x4U\n\x4\f\x4"+
		"\xE\x4X\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5_\n\x5\x3\x6\x3\x6\x3"+
		"\x6\a\x6\x64\n\x6\f\x6\xE\x6g\v\x6\x3\a\x3\a\x3\a\x3\a\x5\am\n\a\x3\b"+
		"\x3\b\x3\b\x5\br\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\by\n\b\f\b\xE\b|\v\b\x3"+
		"\t\x3\t\x3\t\x3\t\a\t\x82\n\t\f\t\xE\t\x85\v\t\x5\t\x87\n\t\x3\t\x3\t"+
		"\x3\n\x3\n\a\n\x8D\n\n\f\n\xE\n\x90\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\xA2\n\f\f\f\xE"+
		"\f\xA5\v\f\x5\f\xA7\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xB1"+
		"\n\r\f\r\xE\r\xB4\v\r\x5\r\xB6\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\a\xE\xCB\n\xE\f\xE\xE\xE\xCE\v\xE\x3\xE\x5\xE\xD1\n\xE\x3\xE\x3"+
		"\xE\x3\xE\x5\xE\xD6\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xE9\n\xF"+
		"\f\xF\xE\xF\xEC\v\xF\x5\xF\xEE\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF"+
		"\xF5\n\xF\f\xF\xE\xF\xF8\v\xF\x3\xF\x3\xF\x5\xF\xFC\n\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x115\n\xF"+
		"\f\xF\xE\xF\x118\v\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13"+
		"\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x5\x15\x136\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x13C\n\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18"+
		"\x151\n\x18\x3\x19\x5\x19\x154\n\x19\x3\x19\x5\x19\x157\n\x19\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x163"+
		"\n\x1B\f\x1B\xE\x1B\x166\v\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x171\n\x1C\x3\x1D\x3\x1D\x5\x1D\x175\n\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x186\n\x1E\f\x1E\xE\x1E\x189"+
		"\v\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x192\n\x1E"+
		"\f\x1E\xE\x1E\x195\v\x1E\x5\x1E\x197\n\x1E\x3\x1E\x5\x1E\x19A\n\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x1A1\n\x1E\f\x1E\xE\x1E\x1A4\v"+
		"\x1E\x5\x1E\x1A6\n\x1E\x3\x1E\a\x1E\x1A9\n\x1E\f\x1E\xE\x1E\x1AC\v\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x1B2\n\x1F\x3\x1F\x2\x2\x4\x1C: \x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34"+
		"\x2\x36\x2\x38\x2:\x2<\x2\x2\x5\x3\x2()\x3\x2*+\x3\x2,\x31\x1D9\x2\x43"+
		"\x3\x2\x2\x2\x4M\x3\x2\x2\x2\x6V\x3\x2\x2\x2\b^\x3\x2\x2\x2\n`\x3\x2\x2"+
		"\x2\fh\x3\x2\x2\x2\xEq\x3\x2\x2\x2\x10}\x3\x2\x2\x2\x12\x8A\x3\x2\x2\x2"+
		"\x14\x93\x3\x2\x2\x2\x16\x98\x3\x2\x2\x2\x18\xAB\x3\x2\x2\x2\x1A\xD5\x3"+
		"\x2\x2\x2\x1C\xFB\x3\x2\x2\x2\x1E\x119\x3\x2\x2\x2 \x11C\x3\x2\x2\x2\""+
		"\x122\x3\x2\x2\x2$\x129\x3\x2\x2\x2&\x12C\x3\x2\x2\x2(\x132\x3\x2\x2\x2"+
		"*\x140\x3\x2\x2\x2,\x149\x3\x2\x2\x2.\x14C\x3\x2\x2\x2\x30\x153\x3\x2"+
		"\x2\x2\x32\x15A\x3\x2\x2\x2\x34\x15E\x3\x2\x2\x2\x36\x170\x3\x2\x2\x2"+
		"\x38\x172\x3\x2\x2\x2:\x199\x3\x2\x2\x2<\x1B1\x3\x2\x2\x2>?\x5\f\a\x2"+
		"?@\a\x38\x2\x2@\x42\x3\x2\x2\x2\x41>\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2\x43"+
		"\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2"+
		"\x2\x46H\x5\x4\x3\x2G\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3"+
		"\x2\x2\x2JK\x3\x2\x2\x2KL\a\x2\x2\x3L\x3\x3\x2\x2\x2MN\a\x3\x2\x2NO\x5"+
		"\n\x6\x2OP\a\x19\x2\x2PQ\x5\x6\x4\x2QR\a\x1A\x2\x2R\x5\x3\x2\x2\x2SU\x5"+
		"\b\x5\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2\x2W\a\x3"+
		"\x2\x2\x2XV\x3\x2\x2\x2Y_\x5\x14\v\x2Z[\x5\x30\x19\x2[\\\a\x38\x2\x2\\"+
		"_\x3\x2\x2\x2]_\x5\x16\f\x2^Y\x3\x2\x2\x2^Z\x3\x2\x2\x2^]\x3\x2\x2\x2"+
		"_\t\x3\x2\x2\x2`\x65\a\x36\x2\x2\x61\x62\a%\x2\x2\x62\x64\a\x36\x2\x2"+
		"\x63\x61\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2"+
		"\x2\x2\x66\v\x3\x2\x2\x2g\x65\x3\x2\x2\x2hi\a\x4\x2\x2il\x5\n\x6\x2jk"+
		"\a\x5\x2\x2km\x5\n\x6\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2m\r\x3\x2\x2\x2no"+
		"\x5\n\x6\x2op\a%\x2\x2pr\x3\x2\x2\x2qn\x3\x2\x2\x2qr\x3\x2\x2\x2rs\x3"+
		"\x2\x2\x2sz\a\x36\x2\x2tu\a\x17\x2\x2uv\x5\x1C\xF\x2vw\a\x18\x2\x2wy\x3"+
		"\x2\x2\x2xt\x3\x2\x2\x2y|\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{\xF"+
		"\x3\x2\x2\x2|z\x3\x2\x2\x2}\x86\a\x1B\x2\x2~\x83\x5,\x17\x2\x7F\x80\a"+
		"&\x2\x2\x80\x82\x5,\x17\x2\x81\x7F\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83"+
		"\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2"+
		"\x2\x2\x86~\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89"+
		"\a\x1C\x2\x2\x89\x11\x3\x2\x2\x2\x8A\x8E\a\x19\x2\x2\x8B\x8D\x5\x1A\xE"+
		"\x2\x8C\x8B\x3\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F"+
		"\x3\x2\x2\x2\x8F\x91\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91\x92\a\x1A\x2"+
		"\x2\x92\x13\x3\x2\x2\x2\x93\x94\x5:\x1E\x2\x94\x95\a\x36\x2\x2\x95\x96"+
		"\x5\x10\t\x2\x96\x97\x5\x12\n\x2\x97\x15\x3\x2\x2\x2\x98\x99\a\v\x2\x2"+
		"\x99\x9A\x5\x1C\xF\x2\x9A\xA6\a\x1B\x2\x2\x9B\x9C\x5:\x1E\x2\x9C\xA3\a"+
		"\x36\x2\x2\x9D\x9E\a&\x2\x2\x9E\x9F\x5:\x1E\x2\x9F\xA0\a\x36\x2\x2\xA0"+
		"\xA2\x3\x2\x2\x2\xA1\x9D\x3\x2\x2\x2\xA2\xA5\x3\x2\x2\x2\xA3\xA1\x3\x2"+
		"\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA6"+
		"\x9B\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\a\x1C"+
		"\x2\x2\xA9\xAA\x5\x12\n\x2\xAA\x17\x3\x2\x2\x2\xAB\xAC\x5\xE\b\x2\xAC"+
		"\xB5\a\x1B\x2\x2\xAD\xB2\x5\x1C\xF\x2\xAE\xAF\a&\x2\x2\xAF\xB1\x5\x1C"+
		"\xF\x2\xB0\xAE\x3\x2\x2\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2"+
		"\xB3\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xAD\x3\x2"+
		"\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\a\x1C\x2\x2\xB8"+
		"\x19\x3\x2\x2\x2\xB9\xBA\x5\x32\x1A\x2\xBA\xBB\a\x38\x2\x2\xBB\xD6\x3"+
		"\x2\x2\x2\xBC\xBD\x5.\x18\x2\xBD\xBE\a\x38\x2\x2\xBE\xD6\x3\x2\x2\x2\xBF"+
		"\xC0\x5\x38\x1D\x2\xC0\xC1\a\x38\x2\x2\xC1\xD6\x3\x2\x2\x2\xC2\xC3\x5"+
		"\x1C\xF\x2\xC3\xC4\a\x38\x2\x2\xC4\xD6\x3\x2\x2\x2\xC5\xC6\x5\x34\x1B"+
		"\x2\xC6\xC7\a\x38\x2\x2\xC7\xD6\x3\x2\x2\x2\xC8\xCC\x5 \x11\x2\xC9\xCB"+
		"\x5\"\x12\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC\xCA\x3\x2\x2"+
		"\x2\xCC\xCD\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD1"+
		"\x5$\x13\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD6\x3\x2\x2\x2"+
		"\xD2\xD6\x5&\x14\x2\xD3\xD6\x5(\x15\x2\xD4\xD6\x5*\x16\x2\xD5\xB9\x3\x2"+
		"\x2\x2\xD5\xBC\x3\x2\x2\x2\xD5\xBF\x3\x2\x2\x2\xD5\xC2\x3\x2\x2\x2\xD5"+
		"\xC5\x3\x2\x2\x2\xD5\xC8\x3\x2\x2\x2\xD5\xD2\x3\x2\x2\x2\xD5\xD3\x3\x2"+
		"\x2\x2\xD5\xD4\x3\x2\x2\x2\xD6\x1B\x3\x2\x2\x2\xD7\xD8\b\xF\x1\x2\xD8"+
		"\xD9\a\x1B\x2\x2\xD9\xDA\x5\x1C\xF\x2\xDA\xDB\a\x1C\x2\x2\xDB\xFC\x3\x2"+
		"\x2\x2\xDC\xFC\x5\x18\r\x2\xDD\xFC\x5\x1E\x10\x2\xDE\xDF\a+\x2\x2\xDF"+
		"\xFC\x5\x1C\xF\xE\xE0\xE1\a\x14\x2\x2\xE1\xFC\x5\x1C\xF\r\xE2\xFC\x5<"+
		"\x1F\x2\xE3\xFC\x5\xE\b\x2\xE4\xED\a\x17\x2\x2\xE5\xEA\x5\x1C\xF\x2\xE6"+
		"\xE7\a&\x2\x2\xE7\xE9\x5\x1C\xF\x2\xE8\xE6\x3\x2\x2\x2\xE9\xEC\x3\x2\x2"+
		"\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC\xEA"+
		"\x3\x2\x2\x2\xED\xE5\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\x3\x2\x2"+
		"\x2\xEF\xFC\a\x18\x2\x2\xF0\xF1\a\x19\x2\x2\xF1\xF6\x5\x1C\xF\x2\xF2\xF3"+
		"\a&\x2\x2\xF3\xF5\x5\x1C\xF\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2"+
		"\xF6\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF9\x3\x2\x2\x2\xF8\xF6\x3"+
		"\x2\x2\x2\xF9\xFA\a\x1A\x2\x2\xFA\xFC\x3\x2\x2\x2\xFB\xD7\x3\x2\x2\x2"+
		"\xFB\xDC\x3\x2\x2\x2\xFB\xDD\x3\x2\x2\x2\xFB\xDE\x3\x2\x2\x2\xFB\xE0\x3"+
		"\x2\x2\x2\xFB\xE2\x3\x2\x2\x2\xFB\xE3\x3\x2\x2\x2\xFB\xE4\x3\x2\x2\x2"+
		"\xFB\xF0\x3\x2\x2\x2\xFC\x116\x3\x2\x2\x2\xFD\xFE\f\f\x2\x2\xFE\xFF\t"+
		"\x2\x2\x2\xFF\x115\x5\x1C\xF\r\x100\x101\f\v\x2\x2\x101\x102\t\x3\x2\x2"+
		"\x102\x115\x5\x1C\xF\f\x103\x104\f\n\x2\x2\x104\x105\t\x4\x2\x2\x105\x115"+
		"\x5\x1C\xF\v\x106\x107\f\t\x2\x2\x107\x108\a\x15\x2\x2\x108\x115\x5\x1C"+
		"\xF\n\x109\x10A\f\b\x2\x2\x10A\x10B\a\x16\x2\x2\x10B\x115\x5\x1C\xF\t"+
		"\x10C\x10D\f\a\x2\x2\x10D\x10E\a\x32\x2\x2\x10E\x115\x5\x1C\xF\b\x10F"+
		"\x110\f\x11\x2\x2\x110\x111\a\x17\x2\x2\x111\x112\x5\x1C\xF\x2\x112\x113"+
		"\a\x18\x2\x2\x113\x115\x3\x2\x2\x2\x114\xFD\x3\x2\x2\x2\x114\x100\x3\x2"+
		"\x2\x2\x114\x103\x3\x2\x2\x2\x114\x106\x3\x2\x2\x2\x114\x109\x3\x2\x2"+
		"\x2\x114\x10C\x3\x2\x2\x2\x114\x10F\x3\x2\x2\x2\x115\x118\x3\x2\x2\x2"+
		"\x116\x114\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x1D\x3\x2\x2\x2\x118"+
		"\x116\x3\x2\x2\x2\x119\x11A\a\t\x2\x2\x11A\x11B\x5\x1C\xF\x2\x11B\x1F"+
		"\x3\x2\x2\x2\x11C\x11D\a\xE\x2\x2\x11D\x11E\a\x1B\x2\x2\x11E\x11F\x5\x1C"+
		"\xF\x2\x11F\x120\a\x1C\x2\x2\x120\x121\x5\x12\n\x2\x121!\x3\x2\x2\x2\x122"+
		"\x123\a\xF\x2\x2\x123\x124\a\xE\x2\x2\x124\x125\a\x1B\x2\x2\x125\x126"+
		"\x5\x1C\xF\x2\x126\x127\a\x1C\x2\x2\x127\x128\x5\x12\n\x2\x128#\x3\x2"+
		"\x2\x2\x129\x12A\a\xF\x2\x2\x12A\x12B\x5\x12\n\x2\x12B%\x3\x2\x2\x2\x12C"+
		"\x12D\a\x13\x2\x2\x12D\x12E\a\x1B\x2\x2\x12E\x12F\x5\x1C\xF\x2\x12F\x130"+
		"\a\x1C\x2\x2\x130\x131\x5\x12\n\x2\x131\'\x3\x2\x2\x2\x132\x133\a\x10"+
		"\x2\x2\x133\x135\a\x1B\x2\x2\x134\x136\x5.\x18\x2\x135\x134\x3\x2\x2\x2"+
		"\x135\x136\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x138\a\x38\x2\x2\x138"+
		"\x139\x5\x1C\xF\x2\x139\x13B\a\x38\x2\x2\x13A\x13C\x5\x32\x1A\x2\x13B"+
		"\x13A\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E"+
		"\a\x1C\x2\x2\x13E\x13F\x5\x12\n\x2\x13F)\x3\x2\x2\x2\x140\x141\a\x11\x2"+
		"\x2\x141\x142\a\x1B\x2\x2\x142\x143\x5:\x1E\x2\x143\x144\a\x36\x2\x2\x144"+
		"\x145\a\x12\x2\x2\x145\x146\x5\x1C\xF\x2\x146\x147\a\x1C\x2\x2\x147\x148"+
		"\x5\x12\n\x2\x148+\x3\x2\x2\x2\x149\x14A\x5:\x1E\x2\x14A\x14B\a\x36\x2"+
		"\x2\x14B-\x3\x2\x2\x2\x14C\x14D\x5:\x1E\x2\x14D\x150\a\x36\x2\x2\x14E"+
		"\x14F\a\'\x2\x2\x14F\x151\x5\x1C\xF\x2\x150\x14E\x3\x2\x2\x2\x150\x151"+
		"\x3\x2\x2\x2\x151/\x3\x2\x2\x2\x152\x154\a\x6\x2\x2\x153\x152\x3\x2\x2"+
		"\x2\x153\x154\x3\x2\x2\x2\x154\x156\x3\x2\x2\x2\x155\x157\a\a\x2\x2\x156"+
		"\x155\x3\x2\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x159"+
		"\x5.\x18\x2\x159\x31\x3\x2\x2\x2\x15A\x15B\x5\xE\b\x2\x15B\x15C\a\'\x2"+
		"\x2\x15C\x15D\x5\x1C\xF\x2\x15D\x33\x3\x2\x2\x2\x15E\x15F\a\x19\x2\x2"+
		"\x15F\x164\x5\x36\x1C\x2\x160\x161\a&\x2\x2\x161\x163\x5\x36\x1C\x2\x162"+
		"\x160\x3\x2\x2\x2\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x165"+
		"\x3\x2\x2\x2\x165\x167\x3\x2\x2\x2\x166\x164\x3\x2\x2\x2\x167\x168\a\x1A"+
		"\x2\x2\x168\x169\a\'\x2\x2\x169\x16A\x5\x1C\xF\x2\x16A\x35\x3\x2\x2\x2"+
		"\x16B\x171\x5\xE\b\x2\x16C\x16D\x5:\x1E\x2\x16D\x16E\a\x36\x2\x2\x16E"+
		"\x171\x3\x2\x2\x2\x16F\x171\a\x33\x2\x2\x170\x16B\x3\x2\x2\x2\x170\x16C"+
		"\x3\x2\x2\x2\x170\x16F\x3\x2\x2\x2\x171\x37\x3\x2\x2\x2\x172\x174\a\b"+
		"\x2\x2\x173\x175\x5\x1C\xF\x2\x174\x173\x3\x2\x2\x2\x174\x175\x3\x2\x2"+
		"\x2\x175\x39\x3\x2\x2\x2\x176\x177\b\x1E\x1\x2\x177\x19A\a\x1D\x2\x2\x178"+
		"\x19A\a\x1E\x2\x2\x179\x19A\a\x1F\x2\x2\x17A\x19A\a \x2\x2\x17B\x17C\a"+
		"\f\x2\x2\x17C\x17D\a.\x2\x2\x17D\x17E\x5:\x1E\x2\x17E\x17F\a\x30\x2\x2"+
		"\x17F\x19A\x3\x2\x2\x2\x180\x181\a\r\x2\x2\x181\x182\a.\x2\x2\x182\x187"+
		"\x5:\x1E\x2\x183\x184\a&\x2\x2\x184\x186\x5:\x1E\x2\x185\x183\x3\x2\x2"+
		"\x2\x186\x189\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2"+
		"\x188\x18A\x3\x2\x2\x2\x189\x187\x3\x2\x2\x2\x18A\x18B\a\x30\x2\x2\x18B"+
		"\x19A\x3\x2\x2\x2\x18C\x18D\a\n\x2\x2\x18D\x196\a.\x2\x2\x18E\x193\x5"+
		":\x1E\x2\x18F\x190\a&\x2\x2\x190\x192\x5:\x1E\x2\x191\x18F\x3\x2\x2\x2"+
		"\x192\x195\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194"+
		"\x197\x3\x2\x2\x2\x195\x193\x3\x2\x2\x2\x196\x18E\x3\x2\x2\x2\x196\x197"+
		"\x3\x2\x2\x2\x197\x198\x3\x2\x2\x2\x198\x19A\a\x30\x2\x2\x199\x176\x3"+
		"\x2\x2\x2\x199\x178\x3\x2\x2\x2\x199\x179\x3\x2\x2\x2\x199\x17A\x3\x2"+
		"\x2\x2\x199\x17B\x3\x2\x2\x2\x199\x180\x3\x2\x2\x2\x199\x18C\x3\x2\x2"+
		"\x2\x19A\x1AA\x3\x2\x2\x2\x19B\x19C\f\x3\x2\x2\x19C\x1A5\a.\x2\x2\x19D"+
		"\x1A2\x5:\x1E\x2\x19E\x19F\a&\x2\x2\x19F\x1A1\x5:\x1E\x2\x1A0\x19E\x3"+
		"\x2\x2\x2\x1A1\x1A4\x3\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3\x2"+
		"\x2\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A5\x19D\x3\x2\x2"+
		"\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A9\a\x30\x2\x2"+
		"\x1A8\x19B\x3\x2\x2\x2\x1A9\x1AC\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA"+
		"\x1AB\x3\x2\x2\x2\x1AB;\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AD\x1B2\a"+
		"!\x2\x2\x1AE\x1B2\a\"\x2\x2\x1AF\x1B2\a#\x2\x2\x1B0\x1B2\a$\x2\x2\x1B1"+
		"\x1AD\x3\x2\x2\x2\x1B1\x1AE\x3\x2\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B1\x1B0"+
		"\x3\x2\x2\x2\x1B2=\x3\x2\x2\x2*\x43IV^\x65lqz\x83\x86\x8E\xA3\xA6\xB2"+
		"\xB5\xCC\xD0\xD5\xEA\xED\xF6\xFB\x114\x116\x135\x13B\x150\x153\x156\x164"+
		"\x170\x174\x187\x193\x196\x199\x1A2\x1A5\x1AA\x1B1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace HOPL.Grammar
